"use strict";(self.webpackChunklogbook=self.webpackChunklogbook||[]).push([[988],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1126:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return d},toc:function(){return u},default:function(){return h}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={},s="RFC and RFT: Expo Starter Kit Instructions",c={permalink:"/logbook/blog/2022/02/13/expo-starter-kit-instructions",editUrl:"https://github.com/robertjcolley/logbook/edit/main/blog/2022-02-13-expo-starter-kit-instructions.md",source:"@site/blog/2022-02-13-expo-starter-kit-instructions.md",title:"RFC and RFT: Expo Starter Kit Instructions",description:"Hey everyone! I'd like to start testing the expo plugin. I've attached a tarball of the repo, and I'd like our testers to follow these instructions and make sure that everything works correctly.",date:"2022-02-13T00:00:00.000Z",formattedDate:"February 13, 2022",tags:[],readingTime:2.17,truncated:!1,authors:[],prevItem:{title:"Developing with ViroCommunity/viro Locally",permalink:"/logbook/blog/2022/02/13/develop-with-viro-locally"},nextItem:{title:"Jest: Flush Promises and Timers with Snapshot Tests",permalink:"/logbook/blog/2022/01/24/jest-flush-snapshot-timers"}},d={authorsImageUrls:[]},u=[{value:"Instructions",id:"instructions",children:[{value:"1. Create a new expo project",id:"1-create-a-new-expo-project",children:[],level:3},{value:"2. Install downloaded tarball as a dependency to the project",id:"2-install-downloaded-tarball-as-a-dependency-to-the-project",children:[{value:"2.1. NPM",id:"21-npm",children:[],level:4},{value:"2.2. Yarn",id:"22-yarn",children:[],level:4}],level:3},{value:"3. Add the plugin to app.json",id:"3-add-the-plugin-to-appjson",children:[],level:3},{value:"4. Generate the ios/android folders",id:"4-generate-the-iosandroid-folders",children:[{value:"4.1. iOS",id:"41-ios",children:[],level:4},{value:"4.2. Android",id:"42-android",children:[],level:4}],level:3},{value:"5. Add changes which use the viro library",id:"5-add-changes-which-use-the-viro-library",children:[],level:3},{value:"6. Build and run the project",id:"6-build-and-run-the-project",children:[{value:"6.1. iOS",id:"61-ios",children:[],level:4},{value:"6.2. Android",id:"62-android",children:[],level:4}],level:3}],level:2}],p={toc:u};function h(e){var t=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Hey everyone! I'd like to start testing the expo plugin. I've attached a tarball of the repo, and I'd like our testers to follow these instructions and make sure that everything works correctly."),(0,a.kt)("p",null,"Specifically, I'd like to test the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"iOS: M1 Mac"),(0,a.kt)("li",{parentName:"ul"},"iOS: Intel Mac"),(0,a.kt)("li",{parentName:"ul"},"Android"),(0,a.kt)("li",{parentName:"ul"},"Android with non-default configuration (",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ViroCommunity/viro/pull/88#discussion_r805226852"},"https://github.com/ViroCommunity/viro/pull/88#discussion_r805226852"),")")),(0,a.kt)("h2",{id:"instructions"},"Instructions"),(0,a.kt)("h3",{id:"1-create-a-new-expo-project"},"1. Create a new expo project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"expo init my-project\n")),(0,a.kt)("h3",{id:"2-install-downloaded-tarball-as-a-dependency-to-the-project"},"2. Install downloaded tarball as a dependency to the project"),(0,a.kt)("p",null,"I would recommend keeping the tarball close to the project folder."),(0,a.kt)("h4",{id:"21-npm"},"2.1. NPM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save ../path/to/viro-community-react-viro-2.22.0.tgz\n")),(0,a.kt)("h4",{id:"22-yarn"},"2.2. Yarn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add ../path/to/viro-community-react-viro-2.22.0.tgz\n")),(0,a.kt)("h3",{id:"3-add-the-plugin-to-appjson"},"3. Add the plugin to app.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"plugins": [ "@viro-community/react-viro" ]\n')),(0,a.kt)("p",null,"OR if testing ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ViroCommunity/viro/pull/88#discussion_r805226852"},"Android with non-default configuration")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"plugins": [\n  [\n    "@viro-community/react-viro",\n    {\n      "androidXrMode": "GVR"\n    }\n  ]\n],\n')),(0,a.kt)("h3",{id:"4-generate-the-iosandroid-folders"},"4. Generate the ios/android folders"),(0,a.kt)("h4",{id:"41-ios"},"4.1. iOS"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"expo run:ios")," will generate the ios/ folder and will run ",(0,a.kt)("inlineCode",{parentName:"p"},"pod install")," in the project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"expo run:ios -d <device id | device name>\n")),(0,a.kt)("h4",{id:"42-android"},"4.2. Android"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"expo run:android\n")),(0,a.kt)("h3",{id:"5-add-changes-which-use-the-viro-library"},"5. Add changes which use the viro library"),(0,a.kt)("p",null,"Replace the contents of App.tsx with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React, {useState} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {\n  ViroARScene,\n  ViroText,\n  ViroConstants,\n  ViroARSceneNavigator,\n} from '@viro-community/react-viro';\n\nconst HelloWorldSceneAR = () => {\n  const [text, setText] = useState('Initializing AR...');\n\n  function onInitialized(state, reason) {\n    console.log('guncelleme', state, reason);\n    if (state === ViroConstants.TRACKING_NORMAL) {\n      setText('Hello World!');\n    } else if (state === ViroConstants.TRACKING_NONE) {\n      // Handle loss of tracking\n    }\n  }\n\n  return (\n    <ViroARScene onTrackingUpdated={onInitialized}>\n      <ViroText\n        text={text}\n        scale={[0.5, 0.5, 0.5]}\n        position={[0, 0, -1]}\n        style={styles.helloWorldTextStyle}\n      />\n    </ViroARScene>\n  );\n};\n\nexport default () => {\n  return (\n    <ViroARSceneNavigator\n      autofocus={true}\n      initialScene={{\n        scene: HelloWorldSceneAR,\n      }}\n      style={styles.f1}\n    />\n  );\n};\n\nvar styles = StyleSheet.create({\n  f1: {flex: 1},\n  helloWorldTextStyle: {\n    fontFamily: 'Arial',\n    fontSize: 30,\n    color: '#ffffff',\n    textAlignVertical: 'center',\n    textAlign: 'center',\n  },\n});\n\n")),(0,a.kt)("h3",{id:"6-build-and-run-the-project"},"6. Build and run the project"),(0,a.kt)("h4",{id:"61-ios"},"6.1. iOS"),(0,a.kt)("p",null,"The iOS instructions are different than the Android instructions because run:ios does not build and run on a physical device. If using a physical device, you might have to configure code signing. I was able to do this by choosing my personal team (not a paid developer account) and removing the push notifications capability. I did have to go into settings to trust the developer certificate, but you shouldn't have this problem if you have a paid developer account. This is found in ",(0,a.kt)("inlineCode",{parentName:"p"},"Settings --\x3e General --\x3e VPN & Device Management"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:n(3532).Z})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"expo run:ios -d <my device id | device name>\n")),(0,a.kt)("h4",{id:"62-android"},"6.2. Android"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"expo run:android\n")))}h.isMDXComponent=!0},3532:function(e,t,n){t.Z=n.p+"assets/images/expo-95c9695bf9bd1ca02f04ab877a1405dc.png"}}]);