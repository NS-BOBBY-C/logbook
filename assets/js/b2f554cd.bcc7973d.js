"use strict";(self.webpackChunklogbook=self.webpackChunklogbook||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/01/24/jest-flush-snapshot-timers","metadata":{"permalink":"/blog/2022/01/24/jest-flush-snapshot-timers","editUrl":"https://github.com/NS-BOBBY-C/logbook/edit/main/blog/2022-01-24-jest-flush-snapshot-timers.md","source":"@site/blog/2022-01-24-jest-flush-snapshot-timers.md","title":"Jest: Flush Promises and Timers with Snapshot Tests","description":"I got a warning error which looked like:","date":"2022-01-24T00:00:00.000Z","formattedDate":"January 24, 2022","tags":[],"readingTime":0.68,"truncated":false,"authors":[],"nextItem":{"title":"Jest: Accurate Snapshots When Loading from UseEffect","permalink":"/blog/2022/01/20/jest-fixing-bad-snapshots-when-loading-data"}},"content":"I got a warning error which looked like:\\n\\n```error\\nWarning: It looks like you\'re using the wrong act() around your test interactions.\\nBe sure to use the matching version of act() corresponding to your renderer:\\n\\n// for react-dom:\\nimport {act} from \'react-dom/test-utils\';\\n// ...\\nact(() => ...);\\n\\n// for react-test-renderer:\\nimport TestRenderer from \'react-test-renderer\';\\nconst {act} = TestRenderer;\\n// ...\\nact(() => ...);\\n```\\n\\nthat has also been documented [here](https://github.com/testing-library/react-hooks-testing-library/issues/516). I was able to fix this by adding a similar function `flushPromisesAndTimersForSnapshot()` and the error messages went away.\\n\\n```typescript\\nimport { act } from \'@testing-library/react\';\\nimport renderer from \'react-test-renderer\';\\n\\nexport function flushPromisesAndTimers() {\\n  return act(\\n    () =>\\n      new Promise((resolve) => {\\n        setTimeout(resolve, 500);\\n        jest.runAllTimers();\\n      })\\n  );\\n}\\n\\nexport function flushPromisesAndTimersForSnapshot() {\\n  return renderer.act(\\n    () =>\\n      new Promise((resolve) => {\\n        setTimeout(resolve, 500);\\n        jest.runAllTimers();\\n      })\\n  );\\n}\\n```"},{"id":"/2022/01/20/jest-fixing-bad-snapshots-when-loading-data","metadata":{"permalink":"/blog/2022/01/20/jest-fixing-bad-snapshots-when-loading-data","editUrl":"https://github.com/NS-BOBBY-C/logbook/edit/main/blog/2022-01-20-jest-fixing-bad-snapshots-when-loading-data.md","source":"@site/blog/2022-01-20-jest-fixing-bad-snapshots-when-loading-data.md","title":"Jest: Accurate Snapshots When Loading from UseEffect","description":"I had a useEffect which fetched data, and I noticed that the snapshot showed the loading spinner when the data was being fetched. I was able to fix this by adding flushPromisesAndTimers() before waitFor() a testID detection. The component looked something like this:","date":"2022-01-20T00:00:00.000Z","formattedDate":"January 20, 2022","tags":[],"readingTime":1.07,"truncated":false,"authors":[],"prevItem":{"title":"Jest: Flush Promises and Timers with Snapshot Tests","permalink":"/blog/2022/01/24/jest-flush-snapshot-timers"},"nextItem":{"title":"Jest: String Matching (Use RegEx)","permalink":"/blog/2022/01/19/jest-using-regex-in-string-matching"}},"content":"I had a useEffect which fetched data, and I noticed that the snapshot showed the loading spinner when the data was being fetched. I was able to fix this by adding `flushPromisesAndTimers()` before `waitFor()` a testID detection. The component looked something like this:\\n\\n```tsx\\nexport default function Component(props: Props) {\\n  const [error, setError] = useState<null | Error>(null);\\n  const [data, setData] = useState(null);\\n  const [loading, setLoading] = useState(true);\\n\\n  useEffect(() => {\\n    const setup = async () => {\\n      setLoading(true);\\n      try {\\n        const newData = await fetch(\'path/to/data\');\\n        setData(newData);\\n      } catch (newError) {\\n        setError(newError as Error);\\n        handleError(newError as Error);\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    setup();\\n  }, []);\\n\\n  if (loading || !data) {\\n    return (\\n      <View style={[styles.container, styles.loading]}>\\n        <Loading />\\n      </View>\\n    );\\n  }\\n\\n  return (\\n    <View style={styles.container} testID=\\"ComponentTestID\\">\\n      <Text>{data}</Text>\\n    </View>\\n  );\\n}\\n\\n```\\n\\nand the test looked like this:\\n\\n```typescript\\ntest(\'should render correctly\', async () => {\\n  const tree = create(\\n    <Component />\\n  );\\n\\n  await flushPromisesAndTimers();\\n\\n  await waitFor(() => {\\n    expect(tree.toJSON()).toMatchSnapshot();\\n  });\\n});\\n```\\n\\nMy flush promises and timers function is from [this issue](https://github.com/facebookexperimental/Recoil/pull/1463) and listed on the [recoil docs](https://recoiljs.org/docs/guides/testing/#testing-recoil-state-with-asyncronous-queries-inside-of-a-react-component) and looks like this:\\n\\n```typesript\\n/**\\n * flushes promises and timers\\n *\\n * @export\\n * @return {*}\\n */\\nexport function flushPromisesAndTimers() {\\n  return act(\\n    () =>\\n      new Promise((resolve) => {\\n        setTimeout(resolve, 500);\\n        jest.runAllTimers();\\n      })\\n  );\\n}\\n```"},{"id":"/2022/01/19/jest-using-regex-in-string-matching","metadata":{"permalink":"/blog/2022/01/19/jest-using-regex-in-string-matching","editUrl":"https://github.com/NS-BOBBY-C/logbook/edit/main/blog/2022-01-19-jest-using-regex-in-string-matching.md","source":"@site/blog/2022-01-19-jest-using-regex-in-string-matching.md","title":"Jest: String Matching (Use RegEx)","description":"While trying to use result.getByText() to find a component, I found that it was not working. My test case was a regression test to make sure that a component could not say \\"1 providers.\\" The component looked like:","date":"2022-01-19T00:00:00.000Z","formattedDate":"January 19, 2022","tags":[],"readingTime":0.605,"truncated":false,"authors":[],"prevItem":{"title":"Jest: Accurate Snapshots When Loading from UseEffect","permalink":"/blog/2022/01/20/jest-fixing-bad-snapshots-when-loading-data"}},"content":"While trying to use `result.getByText()` to find a component, I found that it was not working. My test case was a regression test to make sure that a component could not say \\"1 providers.\\" The component looked like:\\n\\n```tsx\\n <Typography\\n  variant=\\"caption\\"\\n  color=\\"textSecondary\\"\\n  data-testid=\\"approved-by-provider-count\\"\\n>\\n  {t(\'Approved by\')} {abbrNum(supporters.length, 1)}{\' \'}\\n  {supporters.length === 1 ? t(\'provider\') : t(\'providers\')}\\n</Typography>\\n```\\n\\nand the snapshot was:\\n\\n```html\\n<span\\n  class=\\"MuiTypography-root MuiTypography-caption MuiTypography-colorTextSecondary\\"\\n  data-testid=\\"approved-by-provider-count\\">\\n    Approved by\\n\\n    1\\n\\n    provider\\n</span>  \\n```\\n\\nI couldn\'t figure out the newlines and spaces in my expect statement. I tried to use a regex to match the string, and it worked correctly! `/s` matches any whitespace character, including newlines.\\n\\n```typescript\\nconst expected = /Approved by\\\\s*1\\\\s*provider/;\\nconst expected1 = /Approved by\\\\s*1\\\\s*providers/;\\nexpect(result.queryByText(expected1)).not.toBeInTheDocument();\\nexpect(result.getByText(expected)).toBeInTheDocument();\\n```"}]}')}}]);